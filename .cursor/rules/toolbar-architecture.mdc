---
description:
globs: src/ui/Toolbar/**/*.ts,src/ui/Toolbar/**/*.tsx
alwaysApply: false
---
# Toolbar Architecture Patterns

## Component Organization

### Nested Component Structure
Follow the established pattern for complex components:

```
Component/
├── Component.tsx (main component)
├── Component.module.css (styles)
├── components/ (sub-components)
│   ├── SubComponent.tsx
│   └── index.ts (exports)
├── hooks/ (component-specific hooks)
│   ├── useComponentState.ts
│   └── index.ts (exports)
├── constants/ (component constants)
│   ├── animations.ts
│   ├── config.ts
│   └── index.ts (exports)
├── types/ (component types)
│   ├── component.ts
│   └── index.ts (exports)
├── context/ (component contexts)
│   └── ComponentProvider.tsx
└── TabContent/ (for tab-based components)
    ├── TabContent.tsx
    ├── TabContent.module.css
    └── AnotherTabContent.tsx
```

### Index File Patterns
Each directory must have an `index.ts` that exports all public items:

```typescript
// For components
export { ComponentName } from './ComponentName';
export { SubComponent } from './SubComponent';

// For hooks
export { useComponentState } from './useComponentState';
export { useComponentAnimations } from './useComponentAnimations';

// For constants (group related constants)
export { ANIMATION_CONFIG, DIMENSIONS, SHADOWS } from './animations';
export { COMPONENT_CONFIG } from './config';

// For types (prefer re-export all)
export * from './component';
```

## Constants Organization

### Typed Constant Patterns
Use `as const` assertions for immutable configurations:

```typescript
export const EASING = {
  bounce: [0.34, 1.56, 0.64, 1] as const,
  smooth: [0.25, 0.46, 0.45, 0.94] as const,
} as const;

export const DIMENSIONS = {
  collapsed: { width: 60, height: 60, borderRadius: 30 },
  expanded: { width: 400, borderRadius: 12 },
} as const;
```

### Animation Configuration Standards
Structure animation configs by component/purpose:

```typescript
export const ANIMATION_CONFIG = {
  container: {
    width: { duration: 0.5, ease: EASING.bounce },
    height: { duration: 0.5, ease: EASING.bounce },
  },
  content: {
    opacity: { duration: 0.4, ease: EASING.smooth },
    y: { duration: 0.5, ease: EASING.bounce },
  },
} as const;
```

## Type Organization

### Tab and ID Patterns
Define string union types with corresponding order arrays:

```typescript
export type TabId = 'flags' | 'events' | 'settings';
export type ActiveTabId = TabId | undefined;

export const TAB_ORDER: readonly TabId[] = ['flags', 'events', 'settings'] as const;
```

### Feature Data Types
Define clear interfaces for data structures:

```typescript
export interface FeatureFlag {
  id: string;
  name: string;
  enabled: boolean;
  custom: boolean;
  description?: string;
  lastModified?: Date;
  environment?: string;
}
```

## Context Patterns

### Simplified Context + Provider + Hook Pattern
Follow the established three-part context pattern:

```typescript
// 1. Define context type
type ContextType = {
  searchTerm: string;
  setSearchTerm: Dispatch<SetStateAction<string>>;
};

// 2. Create context with defaults
const Context = createContext<ContextType>({
  searchTerm: '',
  setSearchTerm: () => {},
});

// 3. Provider component (simplified pattern)
export function Provider({ children }: { children: React.ReactNode }) {
  const [searchTerm, setSearchTerm] = useState<string>('');
  return <Context.Provider value={{ searchTerm, setSearchTerm }}>{children}</Context.Provider>;
}

// 4. Custom hook with error handling
export function useContext() {
  const context = useContext(Context);
  if (!context) {
    throw new Error('useContext must be used within a Provider');
  }
  return context;
}
```

## Component Naming Conventions

### File Naming
- Main component: `ToolbarComponent.tsx`
- Sub-components: `SubComponentName.tsx`
- Hook files: `useComponentFeature.ts`
- Type files: `componentName.ts` (camelCase)
- Constant files: `animations.ts`, `config.ts`

### Tab Content Pattern
For tab-based content, use descriptive names with individual CSS modules:
- `FlagTabContent.tsx` + `FlagTabContent.module.css`
- `EventsTabContent.tsx` + `EventsTabContent.module.css`
- `SettingsTabContent.tsx` + `SettingsTab.module.css`

### Component Helper Patterns
For component groups, use clear categorization:
- `ActionButtons.tsx`
- `SearchSection.tsx`
- `LogoSection.tsx`
- `EnvironmentLabel.tsx`

## Data Organization

### Mock Data Structure
Centralize mock/test data in `src/tests/mocks/`:

```
src/tests/mocks/
├── flags.ts
├── events.ts (if needed)
└── index.ts (exports)
```

### Data File Patterns
Export mock data with clear typing:

```typescript
import type { FeatureFlag } from '../../ui/Toolbar/types';

export const mockFeatureFlags: FeatureFlag[] = [
  {
    id: 'edge-caching',
    name: 'Edge caching rules v2',
    custom: false,
    enabled: true,
    description: 'Improved caching rules for edge servers',
    lastModified: new Date('2024-01-15'),
    environment: 'production',
  },
  // ... more realistic mock data
];
```

## CSS Module Organization

### Component-Specific Styles
- `Component.module.css` for main component styles
- `SubComponent.module.css` for nested component styles
- Each tab content component has its own CSS module
- Group related styles logically within files

### Class Naming in CSS Modules
Use descriptive, component-scoped class names:
- `.toolbarContainer`
- `.expandedContent`
- `.tabButton`
- `.searchSection`

## Error Handling Patterns

### Error Components
Use standardized error components for consistent UX:

```typescript
// For general errors
<ErrorMessage error={errorString} />

// For no-results states
<GenericHelpText
  title="No results found"
  subtitle="Try adjusting your search"
/>
```

### Error Component Structure
- `ErrorMessage.tsx` for error states
- `GenericHelpText.tsx` for help text and no-results states
- Consistent styling through CSS modules

## Import Standards for Toolbar

### Import Order for Toolbar Components
```typescript
import { useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'motion/react';

import styles from './Component.module.css';
import { useSearchContext } from '../context/SearchProvider';
import { useToolbarContext } from '../context/LaunchDarklyToolbarProvider';
import { ComponentType } from './types';
import { SubComponent } from './components';
```

### Re-export Pattern
Use index files to create clean import paths:
```typescript
// Instead of
import { CircleLogo } from './components/CircleLogo';
import { ExpandedToolbarContent } from './components/ExpandedToolbarContent';

// Use
import { CircleLogo, ExpandedToolbarContent } from './components';
```

## Updated Architecture Notes

### Context Usage
- Use `SearchProvider` for search functionality across tabs
- Use `LaunchDarklyToolbarProvider` for toolbar state and API interactions
- Each context has a focused responsibility

### Component Composition
- Tab content components use shared components (`GenericHelpText`, `List`, `ListItem`)
- Error states handled consistently with `ErrorMessage`
- Search functionality integrated through `useSearchContext`

### Virtualization
- Use `@tanstack/react-virtual` for large lists (see `FlagTabContent`)
- Implement proper scroll containers and estimateSize functions
