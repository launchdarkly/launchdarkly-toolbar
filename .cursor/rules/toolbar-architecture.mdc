---
description:
globs: src/ui/Toolbar/**/*.ts,src/ui/Toolbar/**/*.tsx
alwaysApply: false
---
# Toolbar Architecture Patterns

## Component Organization

### Nested Component Structure
Follow the established pattern for complex components:

```
Component/
├── Component.tsx (main component)
├── Component.module.css (styles)
├── components/ (sub-components)
│   ├── SubComponent.tsx
│   └── index.ts (exports)
├── hooks/ (component-specific hooks)
│   ├── useComponentState.ts
│   └── index.ts (exports)
├── constants/ (component constants)
│   ├── animations.ts
│   ├── config.ts
│   └── index.ts (exports)
├── types/ (component types)
│   ├── component.ts
│   └── index.ts (exports)
├── context/ (component contexts)
│   └── ComponentContext.tsx
└── data/ (mock/static data)
    └── mockData.ts
```

### Index File Patterns
Each directory must have an `index.ts` that exports all public items:

```typescript
// For components
export { ComponentName } from './ComponentName';
export { SubComponent } from './SubComponent';

// For hooks
export { useComponentState } from './useComponentState';
export { useComponentAnimations } from './useComponentAnimations';

// For constants (group related constants)
export { ANIMATION_CONFIG, DIMENSIONS, SHADOWS } from './animations';
export { COMPONENT_CONFIG } from './config';

// For types (prefer re-export all)
export * from './component';
```

## Constants Organization

### Typed Constant Patterns
Use `as const` assertions for immutable configurations:

```typescript
export const EASING = {
  bounce: [0.34, 1.56, 0.64, 1] as const,
  smooth: [0.25, 0.46, 0.45, 0.94] as const,
} as const;

export const DIMENSIONS = {
  collapsed: { width: 60, height: 60, borderRadius: 30 },
  expanded: { width: 400, borderRadius: 12 },
} as const;
```

### Animation Configuration Standards
Structure animation configs by component/purpose:

```typescript
export const ANIMATION_CONFIG = {
  container: {
    width: { duration: 0.5, ease: EASING.bounce },
    height: { duration: 0.5, ease: EASING.bounce },
  },
  content: {
    opacity: { duration: 0.4, ease: EASING.smooth },
    y: { duration: 0.5, ease: EASING.bounce },
  },
} as const;
```

## Type Organization

### Tab and ID Patterns
Define string union types with corresponding order arrays:

```typescript
export type TabId = 'flags' | 'events' | 'settings';
export type ActiveTabId = TabId | undefined;

export const TAB_ORDER: readonly TabId[] = ['flags', 'events', 'settings'] as const;
```

### Feature Data Types
Define clear interfaces for data structures:

```typescript
export interface FeatureFlag {
  id: string;
  name: string;
  enabled: boolean;
  custom: boolean;
  description?: string;
  lastModified?: Date;
  environment?: string;
}
```

## Context Patterns

### Context + Provider + Hook Pattern
Follow the established three-part context pattern:

```typescript
// 1. Define context type
type ContextType = {
  value: string;
  setValue: Dispatch<SetStateAction<string>>;
};

// 2. Create context with defaults
const Context = createContext<ContextType>({
  value: '',
  setValue: () => {},
});

// 3. Provider component
export function Provider({ children }: { children: React.ReactNode }) {
  const [value, setValue] = useState<string>('');
  return <Context.Provider value={{ value, setValue }}>{children}</Context.Provider>;
}

// 4. Custom hook with error handling
export function useContext() {
  const context = useContext(Context);
  if (!context) {
    throw new Error('useContext must be used within a Provider');
  }
  return context;
}
```

## Component Naming Conventions

### File Naming
- Main component: `ToolbarComponent.tsx`
- Sub-components: `SubComponentName.tsx`
- Hook files: `useComponentFeature.ts`
- Type files: `componentName.ts` (camelCase)
- Constant files: `animations.ts`, `config.ts`

### Tab Content Pattern
For tab-based content, use descriptive names:
- `FlagTabContent.tsx`
- `EventsTabContent.tsx`
- `SettingsTabContent.tsx`

### Component Helper Patterns
For component groups, use clear categorization:
- `ActionButtons.tsx`
- `SearchSection.tsx`
- `LogoSection.tsx`
- `EnvironmentLabel.tsx`

## Data Organization

### Mock Data Structure
Separate mock/static data into dedicated `data/` directories:

```
TabContent/
├── FlagTabContent.tsx
├── EventsTabContent.tsx
└── data/
    ├── mockFlags.ts
    └── mockEvents.ts
```

### Data File Patterns
Export mock data with clear typing:

```typescript
import type { FeatureFlag } from '../types';

export const mockFlags: FeatureFlag[] = [
  // data here
];
```

## CSS Module Organization

### Shared vs Component-Specific Styles
- `Component.module.css` for main component styles
- `SubComponent.module.css` for nested component styles
- Group related styles logically within files

### Class Naming in CSS Modules
Use descriptive, component-scoped class names:
- `.toolbarContainer`
- `.expandedContent`
- `.tabButton`
- `.searchSection`

## Import Standards for Toolbar

### Import Order for Toolbar Components
```typescript
import { useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'motion/react';

import styles from './Component.module.css';
import { useComponentHook } from './hooks';
import { COMPONENT_CONFIG } from './constants';
import { ComponentType } from './types';
import { SubComponent } from './components';
```

### Re-export Pattern
Use index files to create clean import paths:
```typescript
// Instead of
import { CircleLogo } from './components/CircleLogo';
import { ExpandedToolbarContent } from './components/ExpandedToolbarContent';

// Use
import { CircleLogo, ExpandedToolbarContent } from './components';
```
